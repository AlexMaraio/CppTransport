// include implementation header generated by translator
#include "higgs_goldstone_mpi.h"

using DataType = double;
using StateType = std::vector<DataType>;

void write_tasks(transport::repository<DataType>& repo, transport::higgs_goldstone_mpi<DataType, StateType>* model);

void write_tasks(transport::repository<DataType>& repo, transport::higgs_goldstone_mpi<DataType, StateType>* model)
    {
        // parameter choices
        const double M_P = 1.0;

        // field initial conditions

        // time initial conditions
        const double N_init        = 0.0;
        const double N_pre         = 8.0;
        const double N_max         = 28.0;

        // set-up parameters and initial conditions

        // time spacing
        transport::basic_range<double> times{N_init, N_max, 500, transport::spacing::linear};

        // set up k values for equilateral configurations
        transport::basic_range<double> ks{exp(10.0), exp(18.5), 1000, transport::spacing::log_bottom};
        transport::basic_range<double> kts{exp(10.0), exp(17.0), 100, transport::spacing::log_bottom};
        transport::basic_range<double> alphas{0.0, 0.0, 0, transport::spacing::linear};
        transport::basic_range<double> betas{1.0/3.0, 1.0/3.0, 0, transport::spacing::linear};

        // construct a twopf task
        transport::twopf_task<DataType> tk2{"higgs_goldstone.twopf", ics, times, ks};
        tk2.set_collect_initial_conditions(true).set_adaptive_ics_efolds(5.0);

        // construct a threepf task
        transport::threepf_alphabeta_task<DataType> tk3{"higgs_goldstone.threepf", ics, times, kts, alphas, betas};
        tk3.set_collect_initial_conditions(true).set_adaptive_ics_efolds(5.0);

        // construct zeta tasks
        transport::zeta_twopf_task<DataType> ztk2{"higgs_goldstone.twopf-zeta", tk2};
        transport::zeta_threepf_task<DataType> ztk3{"higgs_goldstone.threepf-zeta", tk3};        
        ztk2.set_paired(true);
        ztk3.set_paired(true);

        // SQL Queries
        vis_toolkit::SQL_time_query tquery{"1=1"};
        vis_toolkit::SQL_time_query tlast{"serial IN (SELECT MAX(serial) FROM time_samples)"};
        vis_toolkit::SQL_twopf_query k2query{"comoving IN (SELECT MAX(comoving) FROM twopf_samples UNION SELECT MIN(comoving) FROM twopf_samples)"};
        vis_toolkit::SQL_threepf_query k3query{"kt_comoving IN (SELECT MAX(kt_comoving) FROM threepf_samples UNION SELECT MIN(kt_comoving) FROM threepf_samples)"};
        vis_toolkit::SQL_twopf_query k2all{"1=1"};
        vis_toolkit::SQL_threepf_query k3all("1=1");
    }

int main(int argc, char* argv[])
    {
        // create a task manager instance
        transport::task_manager<DataType> mgr(argc, argv);

        // create model instance
        auto model = mgr.create_model< transport::higgs_goldstone_mpi<DataType, StateType> >();

        // write tasks to repository
        mgr.add_generator([=](transport::repository<DataType>& repo) -> void { write_tasks(repo, model.get()); });

        // hand off control to task manager
        mgr.process();

        return(EXIT_PROCESS);
    }