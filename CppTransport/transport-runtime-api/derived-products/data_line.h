//
// Created by David Seery on 21/05/2014.
// Copyright (c) 2014 University of Sussex. All rights reserved.
//


#ifndef __data_line_H_
#define __data_line_H_

#include <vector>
#include <string>

#include "transport-runtime-api/messages.h"
#include "transport-runtime-api/exceptions.h"


namespace transport
  {

    namespace derived_data
      {


        //! A data_line is a data line suitable for use by a derived output.
        //! data_lines are generated by the different content generators, eg field_time_data etc.

        template <typename number>
        class data_line
          {

          public:

		        typedef enum { time_series, kconfig_series } axis_type;

		        typedef enum { background_field, correlation_function, fNL } value_type;

          public:

            data_line(axis_type at, value_type vt, const std::vector<double> a, const std::vector<number> d, const std::string& Ll, const std::string& nLl)
              : x_type(at), y_type(vt), axis(a), data(d), LaTeX_label(Ll), non_LaTeX_label(nLl)
              {
                if(axis.size() != data.size())
                  throw runtime_exception(runtime_exception::RUNTIME_ERROR, __CPP_TRANSPORT_PRODUCT_DATALINE_AXIS_MISMATCH);
              }

            ~data_line() = default;


            // GET DATA

            //! Get number of sample points
            unsigned int size() const { return(this->data.size()); }

            //! Get LaTeX label
            const std::string& get_LaTeX_label() const { return(this->LaTeX_label); }

		        //! Get non-LaTeX label
		        const std::string& get_non_LaTeX_label() const { return(this->non_LaTeX_label); }

		        //! Get axis type
		        axis_type get_axis_type() const { return(this->x_type); }

		        //! Get value type
		        value_type get_value_type() const { return(this->y_type); }

            //! Get data
            const std::vector<number>& get_data_points() const { return(this->data); }

            //! Get axis
            const std::vector<double>& get_axis_points() const { return(this->axis); }


            // INTERNAL DATA

		        //! axis type
		        const axis_type x_type;

		        //! value type
		        const value_type y_type;

            //! axis data points
            const std::vector<double> axis;

            //! line data
            const std::vector<number> data;

            //! non-LaTeX label
            const std::string LaTeX_label;

		        //! non-LaTeX label
						const std::string non_LaTeX_label;
          };


      }   // namespace derived_data

  }   // namespace transport


#endif //__data_line_H_
