//
// Created by David Seery on 01/05/2016.
// --@@
// Copyright (c) 2016 University of Sussex. All rights reserved.
//
// This file is part of the CppTransport platform.
//
// CppTransport is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// CppTransport is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CppTransport.  If not, see <http://www.gnu.org/licenses/>.
//
// @license: GPL-2
// @contributor: David Seery <D.Seery@sussex.ac.uk>
// --@@
//

// include implementation header generated by translator
#include "dquad_mpi.h"

int main(int argc, char* argv[]);

void write_tasks(transport::repository<>& repo, transport::dquad_mpi<>* model);

void write_zeta_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                         transport::range<>& ts, transport::range<>& ks);

void write_fNL_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                        transport::range<>& ts, transport::range<>& ks);


constexpr unsigned int num_fields = 2;


void write_tasks(transport::repository<>& repo, transport::dquad_mpi<>* model)
  {
    const double Mp = 1.0;
    const double Mphi = 9E-5 * Mp;
    const double Mchi = 1E-5 * Mp;

    transport::parameters<> params(Mp, { Mphi, Mchi }, model);

    const double phi_init = 10.0 * Mp;
    const double chi_init = 12.9 * Mp;

    const double N_init = 0.0;
    const double N_pre = 12.0;
    const double N_end = 60.0;

    transport::initial_conditions<> ics("dquad", params, { phi_init, chi_init }, N_init, N_pre);

    transport::basic_range<> ts(N_init, N_end, 300, transport::spacing::linear);

    const double kt_lo = std::exp(3.0);
    const double kt_hi = std::exp(9.0);

    transport::basic_range<> ks_logspaced(kt_lo, kt_hi, 50, transport::spacing::log_bottom);
    transport::basic_range<> ks_linearspaced(kt_lo, kt_hi, 50, transport::spacing::linear);

    write_zeta_products(repo, ics, ts, ks_logspaced);
    write_fNL_products(repo, ics, ts, ks_linearspaced);
  }


void write_zeta_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                         transport::range<>& ts, transport::range<>& ks)
  {
    transport::twopf_task<> tk2("dquad.twopf", ics, ts, ks);
    tk2.set_adaptive_ics_efolds(4.0);
    tk2.set_description("Compute time history of the 2-point function from k ~ e^3 to k ~ e^9");

    transport::threepf_cubic_task<> tk3("dquad.threepf", ics, ts, ks);
    tk3.set_adaptive_ics_efolds(4.0);
    tk3.set_description("Compute time history of the 3-point function on a cubic lattice from k ~ e^3 to k ~ e^9");

    transport::zeta_twopf_task<> ztk2("dquad.twopf-zeta", tk2);
    ztk2.set_description("Convert the output from dquad.twopf into a zeta 2-point function");

    transport::zeta_threepf_task<> ztk3("dquad.threepf-zeta", tk3);
    ztk3.set_description("Convert the output from dquad.threepf into zeta 2- and 3-point functions");

    vis_toolkit::SQL_time_query all_times("1=1");

    vis_toolkit::background_time_series<> bg_fields(tk3, vis_toolkit::index_selector<1>(num_fields).all(), all_times);

    vis_toolkit::time_series_plot<> bg_plot("dquad.product.bg_plot", "background.pdf");
    bg_plot.set_legend_position(vis_toolkit::legend_pos::bottom_left);
    bg_plot += bg_fields;

    transport::output_task<> out_tk("dquad.output.zeta");
    out_tk += bg_plot;

    repo.commit(out_tk);
  }


void write_fNL_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                        transport::range<>& ts, transport::range<>& ks)
  {
    transport::threepf_cubic_task<> tk("dquad.threepf-linear", ics, ts, ks);
    tk.set_adaptive_ics_efolds(4.0);
    tk.set_description("Compute time history of the 3-point function on a linear grid");

    transport::zeta_threepf_task<> ztk("dquad.threepf-linear-zeta", tk);
    ztk.set_description("Convert the output from dquad.threepf-linear into zeta 2 and 3-point functions");

    transport::fNL_task<> fNL_local("dquad.fNL-local", ztk, vis_toolkit::bispectrum_template::local);
    fNL_local.set_description("Compute inner product of double-quadratic bispectrum with local template");

    transport::fNL_task<> fNL_equi("dquad.fNL-equi", ztk, vis_toolkit::bispectrum_template::equilateral);
    fNL_equi.set_description("Compute inner product of double-quadratic bispectrum with equilateral template");

    transport::fNL_task<> fNL_ortho("dquad.fNL-ortho", ztk, vis_toolkit::bispectrum_template::orthogonal);
    fNL_ortho.set_description("Compute inner product of double-quadratic bispectrum with orthogonal template");

    vis_toolkit::SQL_time_query all_times("1=1");

    vis_toolkit::fNL_time_series<> local(fNL_local, all_times);
    vis_toolkit::fNL_time_series<> equi(fNL_equi, all_times);
    vis_toolkit::fNL_time_series<> ortho(fNL_ortho, all_times);

    vis_toolkit::time_series_plot<> fNL_plot("dquad.product.fNL_plot", "fNL_plot.pdf");
    fNL_plot.set_log_y(false).set_abs_y(false);
    fNL_plot += local + equi + ortho;

    transport::output_task<> out_tk("dquad.output.fNL");
    out_tk += fNL_plot;

    repo.commit(out_tk);
  }


int main(int argc, char* argv[])
  {
    // set up a task_manager instance to control this process
    transport::task_manager<> mgr(argc, argv);

    // set up an instance of the double quadratic model
    std::shared_ptr< transport::dquad_mpi<> > model = mgr.create_model< transport::dquad_mpi<> >();

    // register task writer
    mgr.add_generator([=](transport::repository<>& repo) -> void { write_tasks(repo, model.get()); });

    // hand off control to the task manager
    mgr.process();

    return(EXIT_SUCCESS);
  }
